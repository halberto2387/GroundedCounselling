/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Root endpoint
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint for Docker
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Api Health
         * @description API health check
         */
        get: operations["api_health_api_v1_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register */
        post: operations["register_auth_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login */
        post: operations["login_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/specialists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Specialists
         * @description Get list of specialists with optional filtering.
         */
        get: operations["list_specialists_api_v1_specialists_get"];
        put?: never;
        /**
         * Create Specialist Profile
         * @description Create a specialist profile for the current user.
         */
        post: operations["create_specialist_profile_api_v1_specialists_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/specialists/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Specialist Profile
         * @description Get current user's specialist profile.
         */
        get: operations["get_my_specialist_profile_api_v1_specialists_me_get"];
        /**
         * Update My Specialist Profile
         * @description Update current user's specialist profile.
         */
        put: operations["update_my_specialist_profile_api_v1_specialists_me_put"];
        post?: never;
        /**
         * Delete My Specialist Profile
         * @description Delete current user's specialist profile.
         */
        delete: operations["delete_my_specialist_profile_api_v1_specialists_me_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/specialists/{specialist_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Specialist
         * @description Get specialist by ID.
         */
        get: operations["get_specialist_api_v1_specialists__specialist_id__get"];
        /**
         * Update Specialist
         * @description Update specialist profile (only by the specialist themselves).
         */
        put: operations["update_specialist_api_v1_specialists__specialist_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/specialists/me/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Toggle My Availability
         * @description Toggle current specialist's availability status.
         */
        patch: operations["toggle_my_availability_api_v1_specialists_me_availability_patch"];
        trace?: never;
    };
    "/api/v1/bookings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Booking
         * @description Create a new booking as a patient.
         */
        post: operations["create_booking_api_v1_bookings_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bookings/my-bookings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Bookings
         * @description Get current user's bookings as a patient.
         */
        get: operations["get_my_bookings_api_v1_bookings_my_bookings_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bookings/specialist-bookings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Specialist Bookings
         * @description Get bookings for the current specialist.
         */
        get: operations["get_specialist_bookings_api_v1_bookings_specialist_bookings_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bookings/{booking_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Booking
         * @description Get booking by ID (only if user is patient or specialist for this booking).
         */
        get: operations["get_booking_api_v1_bookings__booking_id__get"];
        /**
         * Update Booking
         * @description Update booking (only by patient who created it).
         */
        put: operations["update_booking_api_v1_bookings__booking_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/bookings/{booking_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Cancel Booking
         * @description Cancel a booking (by patient or specialist).
         */
        patch: operations["cancel_booking_api_v1_bookings__booking_id__cancel_patch"];
        trace?: never;
    };
    "/api/v1/bookings/{booking_id}/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Confirm Booking
         * @description Confirm a pending booking (only by specialist).
         */
        patch: operations["confirm_booking_api_v1_bookings__booking_id__confirm_patch"];
        trace?: never;
    };
    "/api/v1/bookings/{booking_id}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Complete Booking
         * @description Mark a booking as completed (only by specialist).
         */
        patch: operations["complete_booking_api_v1_bookings__booking_id__complete_patch"];
        trace?: never;
    };
    "/api/v1/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Session
         * @description Create a session for a booking (only by specialist).
         */
        post: operations["create_session_api_v1_sessions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/my-sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Sessions As Patient
         * @description Get sessions for current user as a patient.
         */
        get: operations["get_my_sessions_as_patient_api_v1_sessions_my_sessions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/specialist-sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Sessions As Specialist
         * @description Get sessions for current specialist.
         */
        get: operations["get_my_sessions_as_specialist_api_v1_sessions_specialist_sessions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Session
         * @description Get session by ID (only if user is patient or specialist for this session).
         */
        get: operations["get_session_api_v1_sessions__session_id__get"];
        /**
         * Update Session
         * @description Update session (only by specialist who created it).
         */
        put: operations["update_session_api_v1_sessions__session_id__put"];
        post?: never;
        /**
         * Delete Session
         * @description Delete session (only by specialist who created it).
         */
        delete: operations["delete_session_api_v1_sessions__session_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/booking/{booking_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Session By Booking
         * @description Get session for a specific booking.
         */
        get: operations["get_session_by_booking_api_v1_sessions_booking__booking_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sessions/{session_id}/notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Session Notes
         * @description Update session notes (only by specialist).
         */
        patch: operations["update_session_notes_api_v1_sessions__session_id__notes_patch"];
        trace?: never;
    };
    "/api/v1/sessions/{session_id}/recording": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Set Recording Url
         * @description Set recording URL for session (only by specialist).
         */
        patch: operations["set_recording_url_api_v1_sessions__session_id__recording_patch"];
        trace?: never;
    };
    "/api/v1/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Availability
         * @description Create an availability slot for the current specialist.
         */
        post: operations["create_availability_api_v1_availability_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/availability/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Bulk Availability
         * @description Create multiple availability slots at once.
         */
        post: operations["create_bulk_availability_api_v1_availability_bulk_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/availability/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Availability
         * @description Get availability slots for the current specialist.
         */
        get: operations["get_my_availability_api_v1_availability_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/availability/specialist/{specialist_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Specialist Availability
         * @description Get availability slots for a specific specialist (public endpoint).
         */
        get: operations["get_specialist_availability_api_v1_availability_specialist__specialist_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/availability/specialist/{specialist_id}/slots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Available Slots
         * @description Get available time slots for a specific specialist and date.
         */
        get: operations["get_available_slots_api_v1_availability_specialist__specialist_id__slots_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/availability/{availability_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Availability
         * @description Get availability slot by ID (only for current specialist).
         */
        get: operations["get_availability_api_v1_availability__availability_id__get"];
        /**
         * Update Availability
         * @description Update availability slot (only for current specialist).
         */
        put: operations["update_availability_api_v1_availability__availability_id__put"];
        post?: never;
        /**
         * Delete Availability
         * @description Delete availability slot (only for current specialist).
         */
        delete: operations["delete_availability_api_v1_availability__availability_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/availability/me/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Clear My Availability
         * @description Clear all availability slots for the current specialist.
         */
        delete: operations["clear_my_availability_api_v1_availability_me_all_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AvailabilityCreate */
        AvailabilityCreate: {
            day_of_week: components["schemas"]["DayOfWeek"];
            /**
             * Start Time
             * Format: time
             */
            start_time: string;
            /**
             * End Time
             * Format: time
             */
            end_time: string;
            /**
             * Is Available
             * @default true
             */
            is_available: boolean;
        };
        /** AvailabilityOut */
        AvailabilityOut: {
            day_of_week: components["schemas"]["DayOfWeek"];
            /**
             * Start Time
             * Format: time
             */
            start_time: string;
            /**
             * End Time
             * Format: time
             */
            end_time: string;
            /**
             * Is Available
             * @default true
             */
            is_available: boolean;
            /** Id */
            id: number;
            /** Specialist Id */
            specialist_id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** AvailabilityUpdate */
        AvailabilityUpdate: {
            day_of_week?: components["schemas"]["DayOfWeek"] | null;
            /** Start Time */
            start_time?: string | null;
            /** End Time */
            end_time?: string | null;
            /** Is Available */
            is_available?: boolean | null;
        };
        /**
         * AvailableSlot
         * @description Available time slot for booking
         */
        AvailableSlot: {
            /**
             * Start Time
             * Format: date-time
             */
            start_time: string;
            /**
             * End Time
             * Format: date-time
             */
            end_time: string;
            /** Duration Minutes */
            duration_minutes: number;
        };
        /** BookingCreate */
        BookingCreate: {
            /**
             * Start Time
             * Format: date-time
             */
            start_time: string;
            /**
             * Duration Minutes
             * @description Duration in minutes (15 min to 8 hours)
             * @default 60
             */
            duration_minutes: number;
            /** Notes */
            notes?: string | null;
            /** Specialist Id */
            specialist_id: number;
        };
        /** BookingOut */
        BookingOut: {
            /**
             * Start Time
             * Format: date-time
             */
            start_time: string;
            /**
             * Duration Minutes
             * @description Duration in minutes (15 min to 8 hours)
             * @default 60
             */
            duration_minutes: number;
            /** Notes */
            notes?: string | null;
            /** Id */
            id: number;
            /** Patient Id */
            patient_id: number;
            /** Specialist Id */
            specialist_id: number;
            status: components["schemas"]["BookingStatus"];
            /** Cancellation Reason */
            cancellation_reason?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * BookingStatus
         * @enum {string}
         */
        BookingStatus: "pending" | "confirmed" | "cancelled" | "completed" | "no_show";
        /** BookingUpdate */
        BookingUpdate: {
            /** Start Time */
            start_time?: string | null;
            /** Duration Minutes */
            duration_minutes?: number | null;
            /** Notes */
            notes?: string | null;
            status?: components["schemas"]["BookingStatus"] | null;
            /** Cancellation Reason */
            cancellation_reason?: string | null;
        };
        /**
         * BulkAvailabilityCreate
         * @description Create multiple availability slots for a specialist
         */
        BulkAvailabilityCreate: {
            /** Availabilities */
            availabilities: components["schemas"]["AvailabilityCreate"][];
        };
        /**
         * DayOfWeek
         * @enum {string}
         */
        DayOfWeek: "monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday" | "sunday";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** SessionCreate */
        SessionCreate: {
            /** Notes */
            notes?: string | null;
            /** Recording Url */
            recording_url?: string | null;
            /**
             * Is Recorded
             * @default false
             */
            is_recorded: boolean;
            /** Session Summary */
            session_summary?: string | null;
            /** Booking Id */
            booking_id: number;
        };
        /** SessionOut */
        SessionOut: {
            /** Notes */
            notes?: string | null;
            /** Recording Url */
            recording_url?: string | null;
            /**
             * Is Recorded
             * @default false
             */
            is_recorded: boolean;
            /** Session Summary */
            session_summary?: string | null;
            /** Id */
            id: number;
            /** Booking Id */
            booking_id: number;
            /** Actual Start Time */
            actual_start_time?: string | null;
            /** Actual End Time */
            actual_end_time?: string | null;
            status: components["schemas"]["SessionStatus"];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * SessionStatus
         * @enum {string}
         */
        SessionStatus: "scheduled" | "in_progress" | "completed" | "cancelled" | "no_show";
        /** SessionUpdate */
        SessionUpdate: {
            /** Actual Start Time */
            actual_start_time?: string | null;
            /** Actual End Time */
            actual_end_time?: string | null;
            status?: components["schemas"]["SessionStatus"] | null;
            /** Notes */
            notes?: string | null;
            /** Recording Url */
            recording_url?: string | null;
            /** Is Recorded */
            is_recorded?: boolean | null;
            /** Session Summary */
            session_summary?: string | null;
        };
        /** SpecialistCreate */
        SpecialistCreate: {
            /** Bio */
            bio?: string | null;
            /** Specializations */
            specializations?: string[];
            /**
             * Hourly Rate
             * @description Hourly rate in USD
             */
            hourly_rate?: number | null;
            /**
             * Is Available
             * @default true
             */
            is_available: boolean;
            /** Years Experience */
            years_experience?: number | null;
            /** License Number */
            license_number?: string | null;
        };
        /** SpecialistOut */
        SpecialistOut: {
            /** Bio */
            bio?: string | null;
            /** Specializations */
            specializations?: string[];
            /**
             * Hourly Rate
             * @description Hourly rate in USD
             */
            hourly_rate?: number | null;
            /**
             * Is Available
             * @default true
             */
            is_available: boolean;
            /** Years Experience */
            years_experience?: number | null;
            /** License Number */
            license_number?: string | null;
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** SpecialistUpdate */
        SpecialistUpdate: {
            /** Bio */
            bio?: string | null;
            /** Specializations */
            specializations?: string[] | null;
            /** Hourly Rate */
            hourly_rate?: number | null;
            /** Is Available */
            is_available?: boolean | null;
            /** Years Experience */
            years_experience?: number | null;
            /** License Number */
            license_number?: string | null;
        };
        /** UserCreate */
        UserCreate: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
        };
        /** UserOut */
        UserOut: {
            /** Id */
            id: number;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Role */
            role: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    api_health_api_v1_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    register_auth_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_specialists_api_v1_specialists_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                is_available?: boolean | null;
                specializations?: string[] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpecialistOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_specialist_profile_api_v1_specialists_post: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SpecialistCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpecialistOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_my_specialist_profile_api_v1_specialists_me_get: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpecialistOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_my_specialist_profile_api_v1_specialists_me_put: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SpecialistUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpecialistOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_my_specialist_profile_api_v1_specialists_me_delete: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_specialist_api_v1_specialists__specialist_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                specialist_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpecialistOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_specialist_api_v1_specialists__specialist_id__put: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path: {
                specialist_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SpecialistUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpecialistOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    toggle_my_availability_api_v1_specialists_me_availability_patch: {
        parameters: {
            query: {
                is_available: boolean;
            };
            header?: {
                "x-user-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpecialistOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_booking_api_v1_bookings_post: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookingCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookingOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_my_bookings_api_v1_bookings_my_bookings_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                status?: components["schemas"]["BookingStatus"] | null;
            };
            header?: {
                "x-user-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookingOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_specialist_bookings_api_v1_bookings_specialist_bookings_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                status?: components["schemas"]["BookingStatus"] | null;
                start_date?: string | null;
                end_date?: string | null;
            };
            header?: {
                "x-user-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookingOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_booking_api_v1_bookings__booking_id__get: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path: {
                booking_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookingOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_booking_api_v1_bookings__booking_id__put: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path: {
                booking_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookingUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookingOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_booking_api_v1_bookings__booking_id__cancel_patch: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path: {
                booking_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookingOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    confirm_booking_api_v1_bookings__booking_id__confirm_patch: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path: {
                booking_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookingOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    complete_booking_api_v1_bookings__booking_id__complete_patch: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path: {
                booking_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookingOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_session_api_v1_sessions_post: {
        parameters: {
            query: {
                booking_id: string;
            };
            header?: {
                "x-user-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SessionCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_my_sessions_as_patient_api_v1_sessions_my_sessions_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: {
                "x-user-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_my_sessions_as_specialist_api_v1_sessions_specialist_sessions_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: {
                "x-user-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_session_api_v1_sessions__session_id__get: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_session_api_v1_sessions__session_id__put: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SessionUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_session_api_v1_sessions__session_id__delete: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_session_by_booking_api_v1_sessions_booking__booking_id__get: {
        parameters: {
            query: {
                session_id: string;
            };
            header?: {
                "x-user-id"?: string | null;
            };
            path: {
                booking_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_session_notes_api_v1_sessions__session_id__notes_patch: {
        parameters: {
            query: {
                notes: string;
            };
            header?: {
                "x-user-id"?: string | null;
            };
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_recording_url_api_v1_sessions__session_id__recording_patch: {
        parameters: {
            query: {
                recording_url: string;
            };
            header?: {
                "x-user-id"?: string | null;
            };
            path: {
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_availability_api_v1_availability_post: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AvailabilityCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AvailabilityOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_bulk_availability_api_v1_availability_bulk_post: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkAvailabilityCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AvailabilityOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_my_availability_api_v1_availability_me_get: {
        parameters: {
            query?: {
                day_of_week?: components["schemas"]["DayOfWeek"] | null;
                is_available?: boolean | null;
            };
            header?: {
                "x-user-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AvailabilityOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_specialist_availability_api_v1_availability_specialist__specialist_id__get: {
        parameters: {
            query?: {
                day_of_week?: components["schemas"]["DayOfWeek"] | null;
                is_available?: boolean | null;
            };
            header?: never;
            path: {
                specialist_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AvailabilityOut"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_available_slots_api_v1_availability_specialist__specialist_id__slots_get: {
        parameters: {
            query: {
                target_date: string;
                duration_minutes?: number;
            };
            header?: never;
            path: {
                specialist_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AvailableSlot"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_availability_api_v1_availability__availability_id__get: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path: {
                availability_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AvailabilityOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_availability_api_v1_availability__availability_id__put: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path: {
                availability_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AvailabilityUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AvailabilityOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_availability_api_v1_availability__availability_id__delete: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path: {
                availability_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    clear_my_availability_api_v1_availability_me_all_delete: {
        parameters: {
            query?: never;
            header?: {
                "x-user-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
