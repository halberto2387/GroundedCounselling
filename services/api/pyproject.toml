[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "grounded-counselling-api"
version = "0.1.0"
description = "FastAPI backend for GroundedCounselling practice management system"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "GroundedCounselling Team", email = "team@groundedcounselling.com"}
]
maintainers = [
    {name = "GroundedCounselling Team", email = "team@groundedcounselling.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.11",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
keywords = ["fastapi", "healthcare", "counselling", "practice-management"]
requires-python = ">=3.11"

# Core dependencies
dependencies = [
    # FastAPI and core
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Database
    "sqlalchemy[asyncio]>=2.0.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    
    # Redis and caching
    "redis>=5.0.0",
    "hiredis>=2.2.0",
    
    # Authentication and security
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.3.0",
    "authlib>=1.2.0",
    "python-multipart>=0.0.6",
    
    # HTTP client
    "httpx>=0.25.0",
    
    # Rate limiting
    "slowapi>=0.1.9",
    
    # Logging and monitoring
    "structlog>=23.2.0",
    "loguru>=0.7.0",
    "sentry-sdk[fastapi]>=1.38.0",
    
    # Background tasks
    "celery>=5.3.0",
    "rq>=1.15.0",
    
    # Search
    "meilisearch>=0.31.0",
    
    # Payments
    "stripe>=7.0.0",
    
    # Environment and configuration
    "python-dotenv>=1.0.0",
    
    # Validation and utilities
    "email-validator>=2.1.0",
    "python-slugify>=8.0.0",
    
    # Email and SMS
    "resend>=0.6.0",
    "twilio>=8.10.0",
]

# Optional dependencies for different environments
[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",  # For testing
    "faker>=20.0.0",
    "factory-boy>=3.3.0",
]

lint = [
    "black>=23.0.0",
    "ruff>=0.1.0", 
    "mypy>=1.7.0",
    "types-redis>=4.6.0",
    "types-passlib>=1.7.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/halberto2387/GroundedCounselling"
Documentation = "https://github.com/halberto2387/GroundedCounselling/tree/main/docs"
Repository = "https://github.com/halberto2387/GroundedCounselling"
Issues = "https://github.com/halberto2387/GroundedCounselling/issues"

[project.scripts]
grounded-api = "api.main:run"

# Tool configurations
[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["py.typed"]

# Black code formatting
[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# Ruff linting
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "S",  # bandit
]
ignore = [
    "B008", # do not perform function calls in argument defaults
    "S104", # hardcoded bind all interfaces
    "S101", # use of assert
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]  # Allow asserts in tests

# MyPy type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "uvicorn.*",
    "alembic.*",
    "sqlalchemy.*",
    "redis.*",
    "celery.*",
    "rq.*",
    "meilisearch.*",
    "stripe.*",
    "resend.*",
    "twilio.*",
    "passlib.*",
    "jose.*",
    "authlib.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]