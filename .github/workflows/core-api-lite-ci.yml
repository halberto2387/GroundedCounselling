name: Core API Lite CI

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'services/api/app/**'
      - 'services/api/alembic/**'
      - 'services/api/requirements.txt'
  push:
    branches: [main, develop]
    paths:
      - 'services/api/app/**'
      - 'services/api/alembic/**'
      - 'services/api/requirements.txt'
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read

env:
  PYTHON_VERSION: '3.11'
  DATABASE_URL: 'sqlite:///./test.db'
  ASYNC_DATABASE_URL: 'sqlite+aiosqlite:///./test.db'

jobs:
  lite-api-check:
    name: Fast API Sanity Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-core-api-lite-${{ hashFiles('services/api/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-core-api-lite-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: services/api
        run: |
          pip install uv
          uv pip install --system -r requirements.txt
          # Ensure aiosqlite present (already in requirements, kept for clarity)
          uv pip install --system aiosqlite

      - name: Apply migrations (SQLite)
        working-directory: services/api
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          ASYNC_DATABASE_URL: ${{ env.ASYNC_DATABASE_URL }}
        run: |
          alembic upgrade head
          echo '✓ Alembic migrations applied'

      - name: Lightweight application & schema checks
        working-directory: services/api
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          ASYNC_DATABASE_URL: ${{ env.ASYNC_DATABASE_URL }}
        run: |
          cat > lite_schema_checks.py <<'PY'
from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)

# Health endpoint
resp = client.get('/health')
assert resp.status_code == 200, resp.text

# Root (if defined) should not 5xx
root = client.get('/')
assert root.status_code < 500, root.text

# OpenAPI schema presence
schema = client.get('/openapi.json').json()
assert 'paths' in schema and schema['paths'], 'OpenAPI schema missing paths'
print(f"✓ OpenAPI has {len(schema['paths'])} paths")

print('✓ Basic FastAPI app + routing sanity checks passed')
PY
          python lite_schema_checks.py

      - name: Basic async DB smoke test
        working-directory: services/api
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          ASYNC_DATABASE_URL: ${{ env.ASYNC_DATABASE_URL }}
        run: |
          python -c "import asyncio; from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession; from sqlalchemy.orm import sessionmaker; from app.models.user import User; async def main(): engine=create_async_engine('sqlite+aiosqlite:///./test.db'); SessionLocal=sessionmaker(engine, class_=AsyncSession, expire_on_commit=False); async with SessionLocal() as session: u=User(email='lite-ci@example.com', password_hash='hashed'); session.add(u); await session.commit(); await session.refresh(u); assert u.id is not None; print('✓ Async DB session CRUD (user create) succeeded'); asyncio.run(main())" 

      - name: Summary
        run: echo "Core API Lite CI completed successfully ✅"
