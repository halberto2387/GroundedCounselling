name: API CI

on:
  workflow_dispatch: {}
  workflow_call: {}
  push:
    branches: [main, develop, 'feature/**', 'hotfix/**']
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('services/api/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install UV and dependencies
        run: |
          pip install uv
          uv pip install --system -r requirements.txt
          # Install dev dependencies if they exist
          if [ -f requirements-dev.txt ]; then
            uv pip install --system -r requirements-dev.txt
          fi
        working-directory: services/api

      - name: Run linting with ruff
        run: |
          # Install ruff if not in requirements
          uv pip install --system ruff || true
          ruff check . --output-format=github || true
        working-directory: services/api

      - name: Run formatting check with black
        run: |
          # Install black if not in requirements
          uv pip install --system black || true
          black --check . || true
        working-directory: services/api

      - name: Run type checking with mypy
        run: |
          # Install mypy if not in requirements
          uv pip install --system mypy || true
          mypy . || true
        working-directory: services/api

      - name: Set up test environment
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" > .env.test
          echo "REDIS_URL=redis://localhost:6379/0" >> .env.test
        working-directory: services/api

      - name: Run migrations
        run: |
          uv pip install --system alembic || true
          alembic -c alembic.ini upgrade head
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        working-directory: services/api

      - name: Run tests with pytest
        run: |
          # Install pytest if not in requirements
          uv pip install --system pytest pytest-asyncio pytest-cov || true
          # Run tests if they exist
          if [ -d tests ] || [ -f test_*.py ] || find . -name "*_test.py" | grep -q .; then
            pytest --cov=app --cov-report=xml --cov-report=term-missing || true
          else
            echo "No tests found, skipping test execution"
          fi
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
        working-directory: services/api

  docker-build:
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: infra/docker/api.Dockerfile
          push: false
          tags: grounded-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max